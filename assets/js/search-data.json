{
  
    
        "post0": {
            "title": "Airlines Data Analysis",
            "content": "Assignment 3 . Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . airlines_df = pd.read_csv(&#39;airlines.csv&#39;) . airlines_df . Airport.Code Airport.Name Time.Label Time.Month Time.Month Name Time.Year Statistics.# of Delays.Carrier Statistics.# of Delays.Late Aircraft Statistics.# of Delays.National Aviation System Statistics.# of Delays.Security ... Statistics.Flights.Delayed Statistics.Flights.Diverted Statistics.Flights.On Time Statistics.Flights.Total Statistics.Minutes Delayed.Carrier Statistics.Minutes Delayed.Late Aircraft Statistics.Minutes Delayed.National Aviation System Statistics.Minutes Delayed.Security Statistics.Minutes Delayed.Total Statistics.Minutes Delayed.Weather . 0 ATL | Atlanta, GA: Hartsfield-Jackson Atlanta Intern... | 2003/06 | 6 | June | 2003 | 1009 | 1275 | 3217 | 17 | ... | 5843 | 27 | 23974 | 30060 | 61606 | 68335 | 118831 | 518 | 268764 | 19474 | . 1 BOS | Boston, MA: Logan International | 2003/06 | 6 | June | 2003 | 374 | 495 | 685 | 3 | ... | 1623 | 3 | 7875 | 9639 | 20319 | 28189 | 24400 | 99 | 77167 | 4160 | . 2 BWI | Baltimore, MD: Baltimore/Washington Internatio... | 2003/06 | 6 | June | 2003 | 296 | 477 | 389 | 8 | ... | 1245 | 15 | 6998 | 8287 | 13635 | 26810 | 17556 | 278 | 64480 | 6201 | . 3 CLT | Charlotte, NC: Charlotte Douglas International | 2003/06 | 6 | June | 2003 | 300 | 472 | 735 | 2 | ... | 1562 | 14 | 7021 | 8670 | 14763 | 23379 | 23804 | 127 | 65865 | 3792 | . 4 DCA | Washington, DC: Ronald Reagan Washington National | 2003/06 | 6 | June | 2003 | 283 | 268 | 487 | 4 | ... | 1100 | 18 | 5321 | 6513 | 13775 | 13712 | 20999 | 120 | 52747 | 4141 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4403 SAN | San Diego, CA: San Diego International | 2016/01 | 1 | January | 2016 | 280 | 397 | 171 | 2 | ... | 871 | 18 | 5030 | 6016 | 15482 | 23023 | 6021 | 79 | 46206 | 1601 | . 4404 SEA | Seattle, WA: Seattle/Tacoma International | 2016/01 | 1 | January | 2016 | 357 | 513 | 351 | 2 | ... | 1274 | 31 | 8330 | 9739 | 25461 | 32693 | 11466 | 73 | 74017 | 4324 | . 4405 SFO | San Francisco, CA: San Francisco International | 2016/01 | 1 | January | 2016 | 560 | 947 | 2194 | 2 | ... | 3825 | 20 | 8912 | 13206 | 43641 | 72557 | 153416 | 66 | 278610 | 8930 | . 4406 SLC | Salt Lake City, UT: Salt Lake City International | 2016/01 | 1 | January | 2016 | 338 | 540 | 253 | 3 | ... | 1175 | 14 | 7426 | 8699 | 32066 | 33682 | 8057 | 57 | 76978 | 3116 | . 4407 TPA | Tampa, FL: Tampa International | 2016/01 | 1 | January | 2016 | 410 | 342 | 312 | 2 | ... | 1095 | 7 | 4748 | 5996 | 22557 | 21164 | 11423 | 37 | 57774 | 2593 | . 4408 rows × 24 columns . 4408 rows and 24 columns . airlines_df.columns . Index([&#39;Airport.Code&#39;, &#39;Airport.Name&#39;, &#39;Time.Label&#39;, &#39;Time.Month&#39;, &#39;Time.Month Name&#39;, &#39;Time.Year&#39;, &#39;Statistics.# of Delays.Carrier&#39;, &#39;Statistics.# of Delays.Late Aircraft&#39;, &#39;Statistics.# of Delays.National Aviation System&#39;, &#39;Statistics.# of Delays.Security&#39;, &#39;Statistics.# of Delays.Weather&#39;, &#39;Statistics.Carriers.Names&#39;, &#39;Statistics.Carriers.Total&#39;, &#39;Statistics.Flights.Cancelled&#39;, &#39;Statistics.Flights.Delayed&#39;, &#39;Statistics.Flights.Diverted&#39;, &#39;Statistics.Flights.On Time&#39;, &#39;Statistics.Flights.Total&#39;, &#39;Statistics.Minutes Delayed.Carrier&#39;, &#39;Statistics.Minutes Delayed.Late Aircraft&#39;, &#39;Statistics.Minutes Delayed.National Aviation System&#39;, &#39;Statistics.Minutes Delayed.Security&#39;, &#39;Statistics.Minutes Delayed.Total&#39;, &#39;Statistics.Minutes Delayed.Weather&#39;], dtype=&#39;object&#39;) . collapse-hide . airlines_df.dtypes . Airport.Code object Airport.Name object Time.Label object Time.Month int64 Time.Month Name object Time.Year int64 Statistics.# of Delays.Carrier int64 Statistics.# of Delays.Late Aircraft int64 Statistics.# of Delays.National Aviation System int64 Statistics.# of Delays.Security int64 Statistics.# of Delays.Weather int64 Statistics.Carriers.Names object Statistics.Carriers.Total int64 Statistics.Flights.Cancelled int64 Statistics.Flights.Delayed int64 Statistics.Flights.Diverted int64 Statistics.Flights.On Time int64 Statistics.Flights.Total int64 Statistics.Minutes Delayed.Carrier int64 Statistics.Minutes Delayed.Late Aircraft int64 Statistics.Minutes Delayed.National Aviation System int64 Statistics.Minutes Delayed.Security int64 Statistics.Minutes Delayed.Total int64 Statistics.Minutes Delayed.Weather int64 dtype: object . airlines_df.head(2) . Airport.Code Airport.Name Time.Label Time.Month Time.Month Name Time.Year Statistics.# of Delays.Carrier Statistics.# of Delays.Late Aircraft Statistics.# of Delays.National Aviation System Statistics.# of Delays.Security ... Statistics.Flights.Delayed Statistics.Flights.Diverted Statistics.Flights.On Time Statistics.Flights.Total Statistics.Minutes Delayed.Carrier Statistics.Minutes Delayed.Late Aircraft Statistics.Minutes Delayed.National Aviation System Statistics.Minutes Delayed.Security Statistics.Minutes Delayed.Total Statistics.Minutes Delayed.Weather . 0 ATL | Atlanta, GA: Hartsfield-Jackson Atlanta Intern... | 2003/06 | 6 | June | 2003 | 1009 | 1275 | 3217 | 17 | ... | 5843 | 27 | 23974 | 30060 | 61606 | 68335 | 118831 | 518 | 268764 | 19474 | . 1 BOS | Boston, MA: Logan International | 2003/06 | 6 | June | 2003 | 374 | 495 | 685 | 3 | ... | 1623 | 3 | 7875 | 9639 | 20319 | 28189 | 24400 | 99 | 77167 | 4160 | . 2 rows × 24 columns . airlines_df.tail(2) . Airport.Code Airport.Name Time.Label Time.Month Time.Month Name Time.Year Statistics.# of Delays.Carrier Statistics.# of Delays.Late Aircraft Statistics.# of Delays.National Aviation System Statistics.# of Delays.Security ... Statistics.Flights.Delayed Statistics.Flights.Diverted Statistics.Flights.On Time Statistics.Flights.Total Statistics.Minutes Delayed.Carrier Statistics.Minutes Delayed.Late Aircraft Statistics.Minutes Delayed.National Aviation System Statistics.Minutes Delayed.Security Statistics.Minutes Delayed.Total Statistics.Minutes Delayed.Weather . 4406 SLC | Salt Lake City, UT: Salt Lake City International | 2016/01 | 1 | January | 2016 | 338 | 540 | 253 | 3 | ... | 1175 | 14 | 7426 | 8699 | 32066 | 33682 | 8057 | 57 | 76978 | 3116 | . 4407 TPA | Tampa, FL: Tampa International | 2016/01 | 1 | January | 2016 | 410 | 342 | 312 | 2 | ... | 1095 | 7 | 4748 | 5996 | 22557 | 21164 | 11423 | 37 | 57774 | 2593 | . 2 rows × 24 columns . airlines_df.describe() . Time.Month Time.Year Statistics.# of Delays.Carrier Statistics.# of Delays.Late Aircraft Statistics.# of Delays.National Aviation System Statistics.# of Delays.Security Statistics.# of Delays.Weather Statistics.Carriers.Total Statistics.Flights.Cancelled Statistics.Flights.Delayed Statistics.Flights.Diverted Statistics.Flights.On Time Statistics.Flights.Total Statistics.Minutes Delayed.Carrier Statistics.Minutes Delayed.Late Aircraft Statistics.Minutes Delayed.National Aviation System Statistics.Minutes Delayed.Security Statistics.Minutes Delayed.Total Statistics.Minutes Delayed.Weather . count 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | 4408.000000 | . mean 6.578947 | 2009.243421 | 574.632486 | 789.078947 | 954.580309 | 5.575544 | 78.216878 | 12.253403 | 213.558076 | 2402.000454 | 27.880898 | 9254.420826 | 11897.860254 | 35021.369782 | 49410.274955 | 45077.107985 | 211.769737 | 135997.535163 | 6276.982759 | . std 3.457890 | 3.667475 | 329.616475 | 561.798420 | 921.907801 | 6.007046 | 75.181726 | 2.289861 | 288.873477 | 1710.947613 | 36.356399 | 5337.214211 | 6861.691876 | 24327.721037 | 38750.017050 | 57636.745683 | 257.174789 | 113972.276370 | 6477.417169 | . min 1.000000 | 2003.000000 | 112.000000 | 86.000000 | 61.000000 | -1.000000 | 1.000000 | 3.000000 | 3.000000 | 283.000000 | 0.000000 | 2003.000000 | 2533.000000 | 6016.000000 | 5121.000000 | 2183.000000 | 0.000000 | 14752.000000 | 46.000000 | . 25% 4.000000 | 2006.000000 | 358.000000 | 425.000000 | 399.000000 | 2.000000 | 33.000000 | 11.000000 | 58.000000 | 1298.750000 | 8.000000 | 5708.750000 | 7400.000000 | 19530.750000 | 25084.250000 | 14389.000000 | 65.000000 | 65444.750000 | 2310.750000 | . 50% 7.000000 | 2009.000000 | 476.000000 | 618.500000 | 667.500000 | 4.000000 | 58.000000 | 12.000000 | 123.000000 | 1899.000000 | 15.000000 | 7477.000000 | 9739.500000 | 27782.000000 | 37483.000000 | 25762.000000 | 141.000000 | 100711.000000 | 4298.500000 | . 75% 10.000000 | 2012.000000 | 692.000000 | 959.000000 | 1166.000000 | 7.000000 | 98.000000 | 14.000000 | 250.000000 | 2950.000000 | 32.000000 | 10991.500000 | 13842.500000 | 41606.000000 | 59951.250000 | 50362.000000 | 274.000000 | 164294.750000 | 7846.000000 | . max 12.000000 | 2016.000000 | 3087.000000 | 4483.000000 | 9066.000000 | 94.000000 | 812.000000 | 18.000000 | 3680.000000 | 13699.000000 | 442.000000 | 31468.000000 | 38241.000000 | 220796.000000 | 345456.000000 | 602479.000000 | 4949.000000 | 989367.000000 | 76770.000000 | . airlines_df[&#39;Airport.Code&#39;] . 0 ATL 1 BOS 2 BWI 3 CLT 4 DCA ... 4403 SAN 4404 SEA 4405 SFO 4406 SLC 4407 TPA Name: Airport.Code, Length: 4408, dtype: object . a = airlines_df[&#39;Statistics.# of Delays.Weather&#39;] a.plot() . &lt;AxesSubplot:&gt; . airlines_df.loc[[0,1,2,3,4,5,6,7,8,9],[&#39;Statistics.# of Delays.Weather&#39;]] . Statistics.# of Delays.Weather . 0 328 | . 1 66 | . 2 78 | . 3 54 | . 4 58 | . 5 98 | . 6 258 | . 7 71 | . 8 121 | . 9 34 | . # as well as the matching 10 elements of a different column that has interesting text airlines_df.loc[[0,1,2,3,4,5,6,7,8,9],[&#39;Statistics.# of Delays.Weather&#39;,&#39;Airport.Code&#39;]] . Statistics.# of Delays.Weather Airport.Code . 0 328 | ATL | . 1 66 | BOS | . 2 78 | BWI | . 3 54 | CLT | . 4 58 | DCA | . 5 98 | DEN | . 6 258 | DFW | . 7 71 | DTW | . 8 121 | EWR | . 9 34 | FLL | . # and make a bar plot with the text values horizontally and the numeric values as the bar heights a = airlines_df.loc[[0,1,2,3,4,5,6,7,8,9],[&#39;Statistics.# of Delays.Weather&#39;,&#39;Airport.Code&#39;]] a.plot(kind = &#39;bar&#39;, x=&#39;Airport.Code&#39;, y=&#39;Statistics.# of Delays.Weather&#39;) . &lt;AxesSubplot:xlabel=&#39;Airport.Code&#39;&gt; . a.plot(kind = &#39;barh&#39;, x=&#39;Airport.Code&#39;, y=&#39;Statistics.# of Delays.Weather&#39;) . &lt;AxesSubplot:ylabel=&#39;Airport.Code&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) a.plot(kind = &#39;barh&#39;, x=&#39;Airport.Code&#39;, y=&#39;Statistics.# of Delays.Weather&#39;, figsize=(12,6), color=&#39;y&#39;) . &lt;AxesSubplot:ylabel=&#39;Airport.Code&#39;&gt; . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . c = airlines_df.groupby(&#39;Airport.Code&#39;)[[&#39;Statistics.# of Delays.Weather&#39;,&#39;Statistics.# of Delays.National Aviation System&#39;]].sum() c.plot(kind = &#39;scatter&#39;, x= &#39;Statistics.# of Delays.Weather&#39;, y=&#39;Statistics.# of Delays.National Aviation System&#39;) . &lt;AxesSubplot:xlabel=&#39;Statistics.# of Delays.Weather&#39;, ylabel=&#39;Statistics.# of Delays.National Aviation System&#39;&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . Analysis 1: . &quot;I organized the total delayed minutes by month in an ascending order and categorized each month into one of the four seasons. I was able to notice a trend in which the total of delayed minutes were generally the highest during the summer months and the lowest for fall months. Then, I explored how much of each category of reasons for being delayed (carrier, late aircrafts, national aviation system, weather, security) contributed to each month.&quot; . w = airlines_df.groupby(&#39;Time.Month Name&#39;)[[&#39;Statistics.Minutes Delayed.Total&#39;]].sum() w.sort_values(by=&#39;Statistics.Minutes Delayed.Total&#39;,ascending=False) . Statistics.Minutes Delayed.Total . Time.Month Name . July 66618470 | . June 66206433 | . December 62753714 | . August 56014722 | . January 50936145 | . March 48767941 | . May 46323059 | . Febuary 44339532 | . April 42258899 | . October 40866813 | . November 38590608 | . September 35800799 | . Analysis 2: . &quot;After seeing the outputs, I noticed that the percentages for each category of reasons were pretty similar across all the months. I was exploring to see if any category had a drastic effect on certain months, but it seemed like the effects were spread out relatively evenly across the months. I wanted to see if there was a correlation between weather and summer months having the highest number of delayed minutes, but it seemed like the months that were delayed the most due to weather were the winter months (12,1,2).&quot; . make a bar chart that shows the total number of delayed minutes due to weather by month . p = airlines_df.groupby(&#39;Time.Month Name&#39;)[[&#39;Statistics.Minutes Delayed.Weather&#39;]].sum() p.sort_values(by=&#39;Statistics.Minutes Delayed.Weather&#39;, ascending=False).plot(kind = &#39;bar&#39;) . &lt;AxesSubplot:xlabel=&#39;Time.Month Name&#39;&gt; . This bar chart makes it easier for the readers to have a visual aid in understanding the above written analysis. After making the visualization, I noticed that there was an error in my previous analysis. I stated that &quot;the months that were delayed the most due to weather were the winter months (12,1,2),&quot; but those numbers weren&#39;t directly representative of the minutes delayed due to weather but rather were the percentages showing how much weather contributed to the delays for each month. I quickly realized through the bar chart that the minutes delayed due to weather were the highest for June and July, which possibly suggests a correlation between the weather and summer months having the highest number of delayed minutes. This again made me realize the benefits of creating visualizations as they present the information in a more efficient and clearer way than just a list of numbers. . i = airlines_df.groupby(&#39;Airport.Code&#39;)[[&#39;Statistics.Minutes Delayed.Weather&#39;]].sum() i.plot(kind = &#39;bar&#39;, figsize = (12,6), color = &#39;b&#39;) . &lt;AxesSubplot:xlabel=&#39;Airport.Code&#39;&gt; . The bar chart shows the total number of minutes delayed due to weather by airport. As the lengths of the bars suggest, ATL (Atlanta), DFW (Dallas), and ORD (Chicago) experienced the longest delays due to weather. I wanted to explore which month/season caused most of these delays for the three airports. . e = airlines_df.loc[:,[&quot;Airport.Code&quot;,&quot;Statistics.Minutes Delayed.Weather&quot;,&quot;Time.Month Name&quot;]] ATL = e.loc[e[&#39;Airport.Code&#39;] == &#39;ATL&#39;] DFW = e.loc[e[&#39;Airport.Code&#39;] == &#39;DFW&#39;] ORD = e.loc[e[&#39;Airport.Code&#39;] == &#39;ORD&#39;] . ATL.groupby(&#39;Time.Month Name&#39;).sum().sort_values(by=&#39;Statistics.Minutes Delayed.Weather&#39;).plot(kind=&#39;barh&#39;) . &lt;AxesSubplot:ylabel=&#39;Time.Month Name&#39;&gt; . ATL experienced the highest number of minutes delayed due to weather in July. . DFW.groupby(&#39;Time.Month Name&#39;).sum().sort_values(by=&#39;Statistics.Minutes Delayed.Weather&#39;).plot(kind=&#39;barh&#39;) . &lt;AxesSubplot:ylabel=&#39;Time.Month Name&#39;&gt; . DFW experienced the highest number of minutes delayed due to weather in June. . ORD.groupby(&#39;Time.Month Name&#39;).sum().sort_values(by=&#39;Statistics.Minutes Delayed.Weather&#39;).plot(kind=&#39;barh&#39;) . &lt;AxesSubplot:ylabel=&#39;Time.Month Name&#39;&gt; . ORD experienced the highest number of minutes delayed due to weather in December. This makes sense considering that Chicago gets a lot of snow every winter. . These visualizations allowed me to explore the context of the data a bit more. It is hard to get the full picture just by looking at the bar chart that shows the total minutes delayed due to weather by airport. However, by breaking down the statistics by months, we are able to get more details about the data and gain insights into the general weather conditions of the cities throughout the year. For example, even though data show that both ATL (Atlanta) and ORD (Chicago) experience a lot of delays due weather, these visualizations that map out the months are able to put the numbers more into context by showing that Atlanta experiences the most delays in the summer months while Chicago in the winter due to their respective weather conditions. .",
            "url": "https://samanthapark23.github.io/blog/fastpages/jupyter/2022/03/05/Airlines.html",
            "relUrl": "/fastpages/jupyter/2022/03/05/Airlines.html",
            "date": " • Mar 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://samanthapark23.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samanthapark23.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://samanthapark23.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samanthapark23.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}